#!/bin/sh
set -eC;

exec 3>/dev/null;

check_gosu() {
    command -v gosu && \
    gosu --version && \
    gosu nobody true;
}

check_setpriv() {
    command -v setpriv && \
    setpriv --version && \
    setpriv --reuid="$(id -u nobody)" --regid="$(id -g nobody)" --clear-groups true;
}

print_user() {
    grep -e "^$1:" /etc/passwd;
}

# Parse options
while [ $# -gt 0 ]; do
    case $1 in
        --debug)
            exec 3>&1;
            ;;
        --setup)
            exec 3>&1;
            o_setup=true;
            ;;
        --)
            shift;
            break;
            ;;
        *)
            break;
    esac
    shift;
done

if [ "$o_setup" = true ]; then
    set -euxC;

    if ! check_setpriv >/dev/null 2>&1; then
        echo 'setpriv is not installed or is out of date. Attempting to install setpriv...';

        # Attempt to install setpriv with apk
        if (apk update && apk -s add setpriv) >/dev/null 2>&1; then
            apk add --no-cache "setpriv>=$SETPRIV_VERSION";
            hash -r;
            check_setpriv;
            echo 'setpriv installed!';

        # Attempt to install setpriv from util-linux with apt-get
        elif (apt-get update && apt-get install --dry-run util-linux) >/dev/null 2>&1; then
            apt-get satisfy --no-install-recommends -y "util-linux (>=$UTIL_LINUX_VERSION)";
            hash -r;
            check_setpriv;
            echo 'setpriv installed!';

        # Attempt to install gosu as a fallback
        elif ! check_gosu >/dev/null 2>&1; then
            echo 'gosu is not installed or is out of date. Attempting to install gosu...';

            unameArch="$(uname -m)";
            case "$unameArch" in
                aarch64) dpkgArch='arm64' ;;
                armv[67]*) dpkgArch='armhf' ;;
                i[3456]86) dpkgArch='i386' ;;
                ppc64le) dpkgArch='ppc64el' ;;
                riscv64 | s390x) dpkgArch="$unameArch" ;;
                x86_64) dpkgArch='amd64' ;;
                *) echo >&2 "error: unknown/unsupported architecture '$unameArch'"; exit 1 ;;
            esac

            mkdir -p /usr/local/bin/;
            wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";
            wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";

            GNUPGHOME="$(mktemp -d)";
            if command -v gpg >/dev/null; then
                gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;
                gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;
                gpgconf --kill all;
            fi
            rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc;
            chmod +x /usr/local/bin/gosu;
            check_gosu;
        fi
    fi
else
    set -eC;

    if [ -z "$GID" ]; then
        printf 'GID is unset\n' >&2;
        exit 1;
    fi

    if [ -z "$GROUP" ]; then
        printf 'GROUP is unset\n' >&2;
        exit 1;
    fi

    if [ -z "$UID" ]; then
        printf 'UID is unset\n' >&2;
        exit 1;
    fi

    if [ -z "$USER" ]; then
        printf 'USER is unset\n' >&2;
        exit 1;
    fi

    echo "CAPABILITIES=$CAPABILITIES" >&3;
    echo "GROUP=$GROUP" >&3;
    echo "GID=$GID" >&3;
    echo "USER=$USER" >&3;
    echo "UID=$UID" >&3;

    # Create/replace user if non-root.
    if [ $UID -ne 0 ] && [ "$USER" != 'root' ]; then
        if id -u "$USER" >/dev/null 2>&1; then
            echo "Removing user matching $USER: $(print_user $USER)" >&3;
            if command -v userdel >/dev/null; then
                userdel "$USER";
            else
                deluser "$USER" 2>/dev/null;
            fi
        fi

        uid_username="$(awk -F: "\$3 == $UID {print \$1}" /etc/passwd)";
        if id -u "$uid_username" >/dev/null 2>&1; then
            echo "Removing user matching UID $UID: $(print_user $uid_username)" >&3;
            if command -v userdel >/dev/null; then
                userdel "$uid_username";
            else
                deluser "$uid_username" 2>/dev/null;
            fi
        fi

        if command -v groupadd >/dev/null; then
            groupadd -g $GID "$GROUP" || true;
        else
            addgroup -g $GID "$GROUP" || true;
        fi
        gid_groupname="$(awk -F: "\$3 == $GID {print \$1}" /etc/group)";

        if command -v useradd >/dev/null; then
            useradd -g $GID -M -s /bin/sh -u $UID $USER;
        else
            adduser -DH -G "$gid_groupname" -s /bin/sh -u $UID $USER;
        fi
        echo "Created user: $(print_user "$USER")" >&3;
    fi

    # Set the ownership of a set of items to the user.
    if [ -n "$CHOWN" ]; then
        echo "$CHOWN" | xargs chown -c "$UID:$GID" >&3;
    fi

    # Execute using $UID
    if check_setpriv >/dev/null 2>&1; then
        if [ -n "$CAPABILITIES" ]; then
            capabilities="-all,$CAPABILITIES";
        else
            capabilities='-all';
        fi

        echo "setpriv --bounding-set \"$capabilities\" --init-groups --no-new-privs --reuid=$UID --regid=$GID ..." >&3;
        setpriv --bounding-set "$capabilities" --init-groups --no-new-privs --reuid=$UID --regid=$GID "$@";
    elif command -v gosu >/dev/null; then
        echo "gosu "$UID:$GID" ..." >&3;
        gosu "$UID:$GID" "$@";
    else
        printf 'Unable to set user\n' >&2;
        exit 1;
    fi
fi