#!/bin/sh
set -eC;

# Parse options
while [ $# -gt 0 ]; do
    case $1 in
        --docker) ;;
        --podman)
            o_podman=true;
            ;;
        --)
            shift;
            break;
            ;;
        *)
            printf 'Unknown option %s\n' $1 >&2;
            exit 1;
            break;
    esac
    shift;
done

if [ "$o_podman" = true ]; then
    CONTAINER_ENGINE='podman';
    if podman compose version >/dev/null 2>&1; then
        COMPOSE_ENGINE='podman compose';
    elif podman-compose version >/dev/null 2>&1; then
        COMPOSE_ENGINE='podman-compose';
    else
        printf 'Could not find a Podman Compose engine.\n' >&2;
        exit 1;
    fi
else
    CONTAINER_ENGINE='docker';
    if docker compose version >/dev/null 2>&1; then
        COMPOSE_ENGINE='docker compose'
    else
        printf 'Could not find a Docker Compose engine.\n' >&2;
        exit 1;
    fi
fi

# Parse docker-compose.yml by attempting to create and parse a container (but not starting it).
if $COMPOSE_ENGINE --progress quiet create >/dev/null 2>&1; then
    TEMP_CONTAINER_ID="$($COMPOSE_ENGINE --progress quiet ps -a --format '{{.ID}}')";

    # Create a list of paths to chown within the container.
    DESTINATIONS="$($CONTAINER_ENGINE inspect --format '{{range .Mounts}}"{{print .Destination}}" {{end}}' "$TEMP_CONTAINER_ID")";
    if [ -n "$DESTINATIONS" ]; then
        printf -- "--env CHOWN='%s' " "$DESTINATIONS";
    fi

    # Create host bind paths that where create_host_path=true.
    while read create_path; do
        if [ -z "$create_path" ]; then
            break;
        fi

        mkdir -p "$create_path" >/dev/null 2>&1 || true;
    done <<EOF
$($CONTAINER_ENGINE inspect --format '{{range .Mounts}}{{if and (eq .Type "bind") (ne .Mode "")}}{{println .Source}}{{end}}{{end}}' "$TEMP_CONTAINER_ID")
EOF
    # Create mounts nested within bind mounts on the host.
    while read edge_source; do
        if [ -z "$edge_source" ]; then
            break;
        fi

        read edge_destination;

        while read node_source; do
            if [ -z "$node_source" ]; then
                break;
            fi

            read node_destination;

            resolved_node_destination="$(echo "$node_destination" | sed -e "s|^${edge_destination}/|${edge_source}/|g")";
            if [ "$resolved_node_destination" = "$node_destination" ]; then
                # Skip if no resolution was made
                continue;
            fi

            if [ -f "$node_source" ]; then
                mkdir -p "$(dirname "$resolved_node_destination")" >/dev/null 2>&1 || true;
                touch "$resolved_node_destination";
            else
                mkdir -p "$resolved_node_destination" >/dev/null 2>&1 || true;
            fi
        done <<EOF
$($CONTAINER_ENGINE inspect --format '{{range .Mounts}}{{println .Source}}{{println .Destination}}{{end}}' "$TEMP_CONTAINER_ID")
EOF

    done <<EOF
$($CONTAINER_ENGINE inspect --format '{{range .Mounts}}{{if eq .Type "bind"}}{{println .Source}}{{println .Destination}}{{end}}{{end}}' "$TEMP_CONTAINER_ID")
EOF

    $CONTAINER_ENGINE container rm "$TEMP_CONTAINER_ID" >/dev/null 2>&1;
fi

# Mirror user depending on if the container engine is rootless or not.
if [ "$o_podman" = true ] || docker info -f '{{println .SecurityOptions}}' | grep 'rootless' 1>/dev/null; then
    printf -- '--env GID=%s ' '0';
    printf -- "--env GROUP='%s' " 'root';
    printf -- '--env UID=%s ' '0';
    printf -- "--env USER='%s' " 'root';
else
    printf -- '--env GID=%s ' "$(id -g)";
    printf -- "--env GROUP='%s' " "$(id -gn)";
    printf -- '--env UID=%s ' "$(id -u)";
    printf -- "--env USER='%s' " "$(id -un)";
fi